package tripleo.impohrt.cl;

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version: 1.3.21
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
public class cl implements clConstants {

    public static void clResetError() {
        clJNI.clResetError();
    }

    public static void clPrintError() {
        clJNI.clPrintError();
    }

    public static int clGetErrorCode() {
        return clJNI.clGetErrorCode();
    }

    public static void clGetErrorMessage(String msg) {
        clJNI.clGetErrorMessage(msg);
    }

    public static void clSetErrorCallback(SWIGTYPE_p_f_p_char_int__void callback) {
        clJNI.clSetErrorCallback(SWIGTYPE_p_f_p_char_int__void.getCPtr(callback));
    }

    public static int clBegin() {
        return clJNI.clBegin();
    }

    public static SWIGTYPE_p_SOCKET clConnect(String hostname, String service_or_port, String protocol) {
        return new SWIGTYPE_p_SOCKET(clJNI.clConnect(hostname, service_or_port, protocol), true);
    }

    public static SWIGTYPE_p_SOCKET clConnectPort(String hostname, int port, String protocol) {
        return new SWIGTYPE_p_SOCKET(clJNI.clConnectPort(hostname, port, protocol), true);
    }

    public static int clAsyncSocket(SWIGTYPE_p_SOCKET s) {
        return clJNI.clAsyncSocket(SWIGTYPE_p_SOCKET.getCPtr(s));
    }

    public static int clSyncSocket(SWIGTYPE_p_SOCKET s) {
        return clJNI.clSyncSocket(SWIGTYPE_p_SOCKET.getCPtr(s));
    }

    public static int clBytesAvailable(SWIGTYPE_p_SOCKET s) {
        return clJNI.clBytesAvailable(SWIGTYPE_p_SOCKET.getCPtr(s));
    }

    public static SWIGTYPE_p_SOCKET clTcpSyncSocket() {
        return new SWIGTYPE_p_SOCKET(clJNI.clTcpSyncSocket(), true);
    }

    public static SWIGTYPE_p_SOCKET clUdpSyncSocket() {
        return new SWIGTYPE_p_SOCKET(clJNI.clUdpSyncSocket(), true);
    }

    public static SWIGTYPE_p_SOCKET clTcpAsyncSocket() {
        return new SWIGTYPE_p_SOCKET(clJNI.clTcpAsyncSocket(), true);
    }

    public static SWIGTYPE_p_SOCKET clUdpAsyncSocket() {
        return new SWIGTYPE_p_SOCKET(clJNI.clUdpAsyncSocket(), true);
    }

    public static SWIGTYPE_p_SOCKET clBroadcastSocket() {
        return new SWIGTYPE_p_SOCKET(clJNI.clBroadcastSocket(), true);
    }

    public static int clGetPortByService(String service, String protocol) {
        return clJNI.clGetPortByService(service, protocol);
    }

    public static int clDisconnect(SWIGTYPE_p_SOCKET s) {
        return clJNI.clDisconnect(SWIGTYPE_p_SOCKET.getCPtr(s));
    }

    public static int clClose(SWIGTYPE_p_SOCKET s) {
        return clJNI.clClose(SWIGTYPE_p_SOCKET.getCPtr(s));
    }

    public static int clEnd() {
        return clJNI.clEnd();
    }

    public static void clSetSRDelay(int milliseconds) {
        clJNI.clSetSRDelay(milliseconds);
    }

    public static int clGetSRDelay() {
        return clJNI.clGetSRDelay();
    }

    public static int clGetRemoteName(SWIGTYPE_p_SOCKET s, String hostname, String address) {
        return clJNI.clGetRemoteName(SWIGTYPE_p_SOCKET.getCPtr(s), hostname, address);
    }

    public static int clSend(SWIGTYPE_p_SOCKET s, String msg, int msg_size) {
        return clJNI.clSend(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size);
    }

    public static int clRecv(SWIGTYPE_p_SOCKET s, String msg, int msg_size) {
        return clJNI.clRecv(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size);
    }

    public static int clAsyncRecv(SWIGTYPE_p_SOCKET s, String msg, int msg_size, int timeout) {
        return clJNI.clAsyncRecv(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, timeout);
    }

    public static int clAsyncSend(SWIGTYPE_p_SOCKET s, String msg, int msg_size, int timeout) {
        return clJNI.clAsyncSend(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, timeout);
    }

    public static int clSendTo(SWIGTYPE_p_SOCKET s, String msg, int msg_size, String host, int port) {
        return clJNI.clSendTo(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, host, port);
    }

    public static int clRecvFrom(SWIGTYPE_p_SOCKET s, String msg, int msg_size, String host, int host_size, int port) {
        return clJNI.clRecvFrom(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, host, host_size, port);
    }

    public static int clAsyncRecvFrom(SWIGTYPE_p_SOCKET s, String msg, int msg_size, String host, int host_size, int port, int timeout) {
        return clJNI.clAsyncRecvFrom(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, host, host_size, port, timeout);
    }

    public static int clAsyncSendTo(SWIGTYPE_p_SOCKET s, String msg, int msg_size, String host, int port, int timeout) {
        return clJNI.clAsyncSendTo(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, host, port, timeout);
    }

    public static int clBroadcast(SWIGTYPE_p_SOCKET s, String msg, int msg_size, int port) {
        return clJNI.clBroadcast(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size, port);
    }

    public static int clSendAll(SWIGTYPE_p_SOCKET s, String msg, int msg_size) {
        return clJNI.clSendAll(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size);
    }

    public static int clRecvAll(SWIGTYPE_p_SOCKET s, String msg, int msg_size) {
        return clJNI.clRecvAll(SWIGTYPE_p_SOCKET.getCPtr(s), msg, msg_size);
    }

    public static SWIGTYPE_p_SOCKET clEstablish(int portnum, int backlog) {
        return new SWIGTYPE_p_SOCKET(clJNI.clEstablish(portnum, backlog), true);
    }

    public static SWIGTYPE_p_SOCKET clWaitNewConnection(SWIGTYPE_p_SOCKET s) {
        return new SWIGTYPE_p_SOCKET(clJNI.clWaitNewConnection(SWIGTYPE_p_SOCKET.getCPtr(s)), true);
    }

    public static int clServerByPort(int port, int backlog, SWIGTYPE_p_f_p_struct_clThreadData__void threadFun, clThreadData arg3) {
        return clJNI.clServerByPort(port, backlog, SWIGTYPE_p_f_p_struct_clThreadData__void.getCPtr(threadFun), clThreadData.getCPtr(arg3));
    }

    public static int clKillParent(int retval) {
        return clJNI.clKillParent(retval);
    }

    public static int clSelect(SWIGTYPE_p_int fds, SWIGTYPE_p_int ready, int count, int seconds, int micro_seconds) {
        return clJNI.clSelect(SWIGTYPE_p_int.getCPtr(fds), SWIGTYPE_p_int.getCPtr(ready), count, seconds, micro_seconds);
    }

}
