/* StringUtil -- Some string utilities.Portions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */package elifarley.util;public class StringUtil {    public static final String MARK_CHARS = "-_.!~*'()";    public static final String RESERVED_CHARS = ";/?:@&=+$,";    public static StringListVector split(String s, char sep) {        StringListVector result = new StringListVector();        if (s.indexOf(sep, 0) == -1) {            result.addElement(new NameValueString(s));            return result;        }        int i = -1, newI;        while (true) {            newI = s.indexOf(sep, i + 1);            if (newI == -1) {                break;            }            result.addElement(new NameValueString(s.substring(i + 1, i = newI).trim()));        }        return result;    }    public static boolean isAlpha(char c) {        return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z');    }    public static boolean isDigit(char c) {        return '0' <= c && c <= '9';    }    public static boolean isAlphaNum(char c) {        return isAlpha(c) || isDigit(c);    }    public static boolean isHexDigit(char c) {        return isDigit(c) || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');    }    public static boolean isMark(char c) {        return MARK_CHARS.indexOf(c) != -1;    }    public static boolean isReserved(char c) {        return RESERVED_CHARS.indexOf(c) != -1;    }    public static boolean isUnreserved(char c) {        return isAlphaNum(c) || isMark(c);    }}