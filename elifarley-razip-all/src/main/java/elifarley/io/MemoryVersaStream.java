/* MemoryVersaStream -- A VersaStream which stores its data in a byte array.Portions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   */package elifarley.io;import java.io.IOException;import java.io.InputStream;import java.io.DataOutput;import java.io.OutputStream;import java.io.Writer;public class MemoryVersaStream extends PosVersaStream {    protected byte buf[];    protected boolean usesExternalBuffer;    protected int count = 0;    protected int capacityIncrement;    public MemoryVersaStream(byte buf[]) {        this.buf = buf;        this.count = buf.length;        this.usesExternalBuffer = true;    }    public MemoryVersaStream(int initialCapacity, int capacityIncrement) {        this.buf = new byte[initialCapacity];        this.capacityIncrement = capacityIncrement;        this.usesExternalBuffer = false;    }    public MemoryVersaStream(int initialCapacity) {        this(initialCapacity, 0);    }    public MemoryVersaStream() {        this(512);    }    public boolean canRead() {        return true;    }    public boolean canWrite() {        return true;    }    public boolean canSeekBackwards() {        return true;    }    public boolean canSeekForward() {        return true;    }    public boolean canSeekFromEnd() {        return true;    }    public boolean canSetSize() {        return !usesExternalBuffer;    }    public boolean markSupported() {        return true;    }    public void close() throws IOException {        buf = null;    }    public synchronized long getSize() throws IOException {        return count;    }    public final synchronized void setSize(long newSize) throws IOException {        if (usesExternalBuffer) {            throw new CannotSetSizeException("Stream uses external buffer");        }        if (((int) newSize > count) && ((int) newSize > buf.length)) {            ensureCapacityHelper((int) newSize);        } else {            for (int i = (int) newSize; i < count; i++) {                buf[i] = 0;            }        }        count = (int) newSize;    }    public int read() throws IOException {        if (pos >= count) {            return -1;        }        return 0xff & buf[(int) (pos++)]; // HOW COULD I FORGET TO PUT THE "0xff &" THING!!!!!    }    public int read(byte b[], int off, int len) throws IOException {        int maxLen = (int) (count - pos);        if (maxLen < 1) {            return -1;        }        if (len > maxLen) {            len = maxLen;        }        System.arraycopy(buf, (int) pos, b, off, len);        pos += len;        return len;    }    public synchronized void write(int b) throws IOException {        if (pos >= count) {            ensureCapacityHelper((int) pos + 1);            count = (int) pos + 1;        }        buf[(int) (pos++)] = (byte) b;    }    public synchronized void write(byte b[], int off, int len) throws IOException {        int pl = (int) pos + len;        if (pl > count) {            ensureCapacityHelper(pl);            count = pl;        }        System.arraycopy(b, off, buf, (int) pos, len);        pos = pl;    }    public byte[] getBuffer() {        return buf;    }    public synchronized long copyTo(DataOutput dest, long count) throws IOException {        if (count < 0) {            if (pos != 0) {                pos = 0;            }            count = this.count - pos;        } else {            if (count == 0) {                count = this.count - pos;            }        }        if (count > 0) {            synchronized (buf) {                dest.write(buf, (int) pos, (int) count);            }            return count;        }        return 0;    }    public synchronized long copyTo(OutputStream dest, long count) throws IOException {        if (count < 0) {            if (pos != 0) {                pos = 0;            }            count = this.count - pos;        } else {            if (count == 0) {                count = (int) (this.count - pos);            }        }        if (count > 0) {            synchronized (buf) {                dest.write(buf, (int) pos, (int) count);            }            return count;        }        return 0;    }    public synchronized long copyTo(Writer dest, long count) throws IOException {        if (count < 0) {            if (pos != 0) {                pos = 0;            }            count = this.count - pos;        } else {            if (count == 0) {                count = this.count - pos;            }        }        if (count > 0) {            synchronized (buf) {                dest.write(new String(buf, (int) pos, (int) count));            }            return count;        }        return 0;    }    /*    public synchronized long copyTo(String dest, long count) throws IOException {  		if (count < 0) {  			if (pos != 0) pos = 0;  			count = this.count - pos;  		} else {			if (count == 0) count = this.count - pos;		}				if (count > 0) {			synchronized (buf) {	    		dest = new String(buf, pos, (int)count ); 			}    		return count;		}				return 0;	}    public synchronized String toString() {		return new String(((MemoryVersaStream)this).buf, 0, this.count);	}     */    public final synchronized void trimToSize() {        int oldCapacity = buf.length;        if (count < oldCapacity) {            byte oldBuf[] = buf;            buf = new byte[count];            System.arraycopy(oldBuf, 0, buf, 0, count);        }    }    public final synchronized void ensureCapacity(int minCapacity) throws IOException {        if (minCapacity > buf.length) {            ensureCapacityHelper(minCapacity);        }    }    private void ensureCapacityHelper(int minCapacity) throws IOException {        if (usesExternalBuffer) {            throw new CannotSetSizeException("Stream uses external buffer");        }        int oldCapacity = buf.length;        byte oldBuf[] = buf;        int newCapacity = (capacityIncrement > 0)                ? (oldCapacity + capacityIncrement) : (oldCapacity * 2);        if (newCapacity < minCapacity) {            newCapacity = minCapacity;        }        buf = new byte[newCapacity];        System.arraycopy(oldBuf, 0, buf, 0, count);    }}