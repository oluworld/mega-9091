/* VersaStreamFactory -- Automatically detects and returns an approrpiate VersaStreamPortions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package elifarley.io;import elifarley.razip.RAZipConstants;import elifarley.razip.RAZipVersaStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.Reader;import java.io.Writer;public final class VersaStreamFactory {    public static final short GZIP_ID = (short) 0x1F8B;    public static VersaStream getVersaStream(String path, String mode) throws IOException {        return getVersaStream(path, mode, false);    }    public static VersaStream getVersaStream(String path, String mode, boolean forceUncompressed) throws IOException {        String st = new String(path.toUpperCase());        if (st.startsWith("HTTP://") || st.startsWith("FTP://")) {            return new URLVersaStream(path);        }        VersaStream vs = new FileVersaStream(path, mode);        if (!forceUncompressed) {            vs = getFilteredVersaStream(vs);        }        return vs;    }    public static VersaStream getVersaStream() throws IOException {        return new MemoryVersaStream();    }    public static VersaStream getVersaStream(byte buf[]) throws IOException {        return new MemoryVersaStream(buf);    }    public static VersaStream getVersaStream(InputStream in) throws IOException {        return new InputStreamVersaStream(in);    }    public static VersaStream getVersaStream(OutputStream out) throws IOException {        return new OutputStreamVersaStream(out);    }    public static VersaStream getVersaStream(Reader in) throws IOException {        return new ReaderVersaStream(in);    }    public static VersaStream getVersaStream(Writer out) throws IOException {        return new WriterVersaStream(out);    }    /*	 * Detects compressed stream     */    public static VersaStream getFilteredVersaStream(VersaStream vs) throws IOException {        System.out.println("Trying to detect format...");        short sVal;        boolean isReadOnly = !vs.canWrite();        if (isReadOnly) {            if (vs.getSize() > 2) {                sVal = vs.readShort();                vs.reset();                if (sVal == RAZipConstants.RAZIP_MAGIC) {                    System.out.println("RAZip format detected (read-only)");                    vs = new RAZipVersaStream(vs);                } else if (sVal == GZIP_ID) {                    System.out.println("GZip format detected (read-only)");                    vs = new GZipVersaStream(vs);                    //InputStreamVersaStream(new GZIPResetInputStream( vs.getInputStream(0) ));                }            }        } else {            if (vs.getSize() > 2) {                sVal = vs.readShort();                vs.reset();                if (sVal == RAZipConstants.RAZIP_MAGIC) {                    System.out.println("RAZip format detected (read/write)");                    vs = new RAZipVersaStream(vs);                } else if (sVal == GZIP_ID) {                    throw new IOException("Cannot open GZip stream in read/write mode");                } else {                    //nothing                }            } else {                System.out.println("Creating new RAZip stream (read/write)");                vs = new RAZipVersaStream(vs);            }        }        return vs;    }}