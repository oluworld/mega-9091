/*CopyrightPortions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package elifarley.io.fs;import java.util.Date;import java.io.File;import java.io.IOException;public class VersaFSEntry {    protected String name;	protected VersaFS vfs; // File system to which this entry pertains	    /*    private native boolean exists0();    private native boolean canWrite0();    private native boolean canRead0();    private native boolean isFile0();    private native boolean isDirectory0();    private native long lastModified0();    private native long length0();    private native boolean mkdir0();    private native boolean renameTo0(File dest);    private native boolean delete0();    private native boolean rmdir0(); // remove empty directory    private native String[] list0();    private native String canonPath(String p) throws IOException;	*/	    public VersaFSEntry(VersaFS vfs) {    	this.vfs = vfs;    }        /**     * Returns the name of the entry.     */    public String getName() {		return name;    }    public void setName(String name) {		this.name = name;    }    public void setSize(long size) throws IOException {		vfs.setSize(this, size);    }    /**     * Returns the uncompressed size of the entry data, or -1 if not known.     */    public long getSize() throws IOException {		return vfs.getSize(this);    }    /**     * Returns a string representation of the Tar entry.     */    public String toString() {		return getName();    }}