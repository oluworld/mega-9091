/* VersaFS -- Base class for generic file systems.Portions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/ package elifarley.io.fs;import java.io.IOException;import java.util.Date;import elifarley.io.VersaStream;public abstract class VersaFS {	public static VersaFS globalVFS;		static {		String testST = new String("asdf");		//globalVFS = new VersaFS();	}		protected String CWD = "/";		public abstract String getDataSourceName();	public abstract VersaFSEntry getEntry(String entryName) throws IOException;	public abstract Date getCreationDate(VersaFSEntry vfse) throws IOException;		public abstract void setCreationDate(VersaFSEntry vfse, Date date) throws IOException;		public abstract Date getModificationDate(VersaFSEntry vfse) throws IOException;		public abstract void setModificationDate(VersaFSEntry vfse, Date date) throws IOException;		public abstract long getSize(VersaFSEntry vfse) throws IOException;		public abstract void setSize(VersaFSEntry vfse, long newSize) throws IOException;	    public abstract boolean isDirectory(VersaFSEntry vfse);	public abstract void rm(VersaFSEntry vfse) throws IOException;		public abstract void rmdir(VersaFSEntry vfse) throws IOException;		public abstract void cp(VersaFSEntry vfseFrom, VersaFSEntry vfseTo) throws IOException;		public abstract void mv(VersaFSEntry vfseFrom, VersaFSEntry vfseTo) throws IOException;		public abstract void mkdir(VersaFSEntry vfse) throws IOException;		public abstract VersaStream getVersaStream(VersaFSEntry vfse) throws IOException;    public abstract long getCount();			public String getCWD(){		return CWD;			}		public void mount(VersaFS newFS, String path){		}		public void cd(String newPath){		CWD = newPath;	}		public static String getVersion() {		return "1.0";	}}