/* ZipEntry -- Represents a ZIP entry. * Copyright (C) 2001 Elifarley Callado Coelho  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License, version 2, * as published by the Free Software Foundation; * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. * See the file "COPYING" for the software license.  * Elifarley Callado Coelho * Belo Horizonte, Brazil * elifarley@yahoo.com * http://www.geocities.com/elifarley/ *  */package elifarley.io.fs.zip;import elifarley.io.fs.VersaFSEntry;import elifarley.io.fs.VersaFS;import java.util.Date;public class ZipEntry extends VersaFSEntry implements ZipConstants {    protected byte typeFlag;    protected long time = -1;	// modification time (in DOS time)    long crc = -1;	// crc-32 of entry data    long size = -1;	// uncompressed size of entry data    int method = -1;	// compression method    byte[] extra;	// optional extra field data for entry    String comment;	// optional comment string for entry    int flag;		// general purpose bit flag    int version;	// version of ZIP this entry was made by    long csize = -1;   	// compressed size of entry data    long offset;	// offset of LOC header from beginning of ZIP file        public static final int ZCM_STORED = 0;    public static final int ZCM_DEFLATED = 8;    public ZipEntry(String name, VersaFS vfs) {    	super(vfs);		if (name == null) {		    throw new NullPointerException();		}		if (name.length() > 0xFFFF) {		    throw new IllegalArgumentException("entry name too long");		}		this.name = name;    }    ZipEntry(VersaFS vfs) {    	super(vfs);    }        public String getName() {		return name;    }		public void setTime(long time) {		this.time = time;    }    public long getTime() {		return time;    }    public void setSize(long size) {		if (size < 0 || size > 0xFFFFFFFFL) {		    throw new IllegalArgumentException("invalid entry size");		}		this.size = size;    }    public long getSize() {		return size;    }	        public long getOffset() {		return offset;    }	    public void setOffset(long offset){    	this.offset = offset;    }        public void setCrc(int crc) {		this.crc = crc;    }    public long getCrc() {		return crc;    }	public byte getTypeFlag() {		return typeFlag;	}		    }