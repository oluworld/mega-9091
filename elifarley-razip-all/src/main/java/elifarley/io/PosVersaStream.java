/* PosVersaStream -- A VersaStream which keeps track of its current position.Portions of this software are Copyright (c) 2001, Elifarley Callado Coelho -http://www.geocities.com/elifarley/LicenseRedistribution and use in source and binary forms,with or without modification, are permitted provided thatthe following conditions are met:*	Redistributions of source code must retain the abovecopyright notice, this list of conditions and the followingdisclaimer. *	Redistributions in binary form must reproduce the abovecopyright notice, this list of conditions and the followingdisclaimer in the documentation, about box and/or othermaterials provided with the distribution. *	No personal names or organizations names associatedwith the Indy project may be used to endorse or promoteproducts derived from this software without specific priorwritten permission of the specific individual ororganization. THIS SOFTWARE IS PROVIDED BY ITS AUTHOR (ELIFARLEY CALLADO COELHO) "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   */package elifarley.io;import java.io.IOException;public abstract class PosVersaStream extends VersaStream {    protected long pos = 0;    public final long getPosition() {        return pos;    }    public final void setPosition(long pos) {        if (pos < 0) {            throw new IllegalArgumentException("Can't position stream at " + pos);        }        this.pos = pos;    }    public final long seek(long offset, short origin) throws IOException {        long newPos;        switch (origin) {            case FROM_BEGINNING:                newPos = offset;                break;            case FROM_CURRENT:                newPos = pos + offset;                break;            case FROM_END:                newPos = getSize() + offset;                break;            default:                throw new IOException("Invalid origin: " + origin);        }        if (newPos < 0) {            throw new IOException("Can't position stream at " + newPos);        }        pos = newPos;        return pos;    }}