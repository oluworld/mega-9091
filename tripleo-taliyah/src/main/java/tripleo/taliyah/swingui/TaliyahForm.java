package tripleo.taliyah.swingui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * Date: Jul 31, 2005
 * Time: 11:16:59 PM
 * <p/>
 * $Id: TaliyahForm.java,v 1.2 2005/08/06 18:30:48 olu Exp $
 */
public class TaliyahForm {
	private JTabbedPane tabbedPane1;
	private JTree tree1;
	public JPanel myComponent;

	public TaliyahForm() {
		TreeModel_Main tm= new TreeModel_Main();
		tree1.setModel(tm);
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// !!! IMPORTANT !!!
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * !!! IMPORTANT !!!
	 * DO NOT edit this method OR call it in your code!
	 */
	private void $$$setupUI$$$() {
		myComponent = new JPanel();
		myComponent.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		myComponent.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
		final JSplitPane splitPane1 = new JSplitPane();
		splitPane1.setContinuousLayout(false);
		splitPane1.setOneTouchExpandable(false);
		panel1.add(splitPane1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null));
		tree1 = new JTree();
		tree1.setRootVisible(false);
		tree1.setShowsRootHandles(false);
		splitPane1.setLeftComponent(tree1);
		tabbedPane1 = new JTabbedPane();
		splitPane1.setRightComponent(tabbedPane1);
	}

	public static final class MySetLafAction extends AbstractAction {

		public void actionPerformed(ActionEvent e) {
			try {
				UIManager.setLookAndFeel(myInfo.getClassName());
				SwingUtilities.updateComponentTreeUI(myFrame);
				Dimension prefSize = myFrame.getPreferredSize();
				if (prefSize.width > myFrame.getWidth() || prefSize.height > myFrame.getHeight())
					myFrame.pack();
			} catch (Exception exc) {
				JOptionPane.showMessageDialog(myFrame, "Cannot change LookAndFeel.\nReason: " + exc.getMessage(), "Error", 0);
			}
		}

		private final JFrame myFrame;
		private final javax.swing.UIManager.LookAndFeelInfo myInfo;

		public MySetLafAction(JFrame frame, javax.swing.UIManager.LookAndFeelInfo info) {
			super(info.getName());
			myFrame = frame;
			myInfo = info;
		}
	}

	public static final class MyPackAction extends AbstractAction {

		public void actionPerformed(ActionEvent e) {
			myFrame.pack();
		}

		private final JFrame myFrame;

		public MyPackAction(JFrame frame) {
			super("Pack");
			myFrame = frame;
		}
	}

	public static final class MyExitAction extends AbstractAction {

		public void actionPerformed(ActionEvent e) {
			System.exit(0);
		}

		public MyExitAction() {
			super("Exit");
		}
	}

	public static final class MyWindowListener extends WindowAdapter {

		public void windowClosing(WindowEvent e) {
			System.exit(0);
		}

		public MyWindowListener() {
		}

	}

	static class TreeModel_Main extends DefaultTreeModel {
		private final String root_ = "root";
		private List<String> rootChildren;

		public TreeModel_Main() {
			super(new DefaultMutableTreeNode());
		}

//		public Object getRoot() {
//			return root_;
//		}

		public Object getChild(Object parent, int index) {
			if (parent == root_) {
				return rootChildren().get(index);
			}
			return null;
		}

		private List<String> rootChildren() {
			if (rootChildren == null) {
				rootChildren = new ArrayList<String>();
				rootChildren.add("Editor");
				rootChildren.add("Recent Files");
				rootChildren.add("Other Recent Resources");
				rootChildren.add("Bookmarks");
				rootChildren.add("Transport");
				rootChildren.add("Current Directory");
				rootChildren.add("Path");
				rootChildren.add("Recent Directories");
				rootChildren.add("Preferences");
				rootChildren.add("Layout");
			}
			return rootChildren;
		}

		public int getChildCount(Object parent) {
			if (parent == root_) {
				return rootChildren().size();
			}
			return 0;
		}

		public boolean isLeaf(Object node) {
			if (node == root_) {
				return false;
			}
			return true;
		}

		public void valueForPathChanged(TreePath path, Object newValue) {
			int y=2;
		}

		public int getIndexOfChild(Object parent, Object child) {
			int y=2;
			return -1;
		}

//		public void addTreeModelListener(TreeModelListener l) {
//			int y=2;
//		}
//
//		public void removeTreeModelListener(TreeModelListener l) {
//			int y=2;
//		}
	}
}
