

2005-10-16 10:16             .\DefaultHeaderImpl.java             Page 1


package tripleo.http.impl;

import java.io.Serializable;

import tripleo.http.IHeader;

/**
 * Date: Aug 18, 2005
 * Time: 7:35:52 PM
 * <p/>
 * $Id: DefaultHeaderImpl.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 */
public class DefaultHeaderImpl implements IHeader, Serializable {

	public static IHeader make(String name,String value) {
		DefaultHeaderImpl R = new DefaultHeaderImpl(name,value);
		return R;
	}

	String name,value;

	public DefaultHeaderImpl(String aName, String aValue) {
		name = aName;
		value = aValue;
	}

	public String getName() {
		return name;
	}

	public void setName(String aName) {
		name = aName;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String aValue) {
		value = aValue;
	}
}





















2005-10-16 10:16                    .\CVS\Root                    Page 1


:local:/local/system/code/cvs






























































2005-10-16 10:16                 .\CVS\Repository                 Page 1


tripleo-maven/src/java/tripleo/http/impl






























































2005-10-16 14:51                  .\CVS\Entries                   Page 1


/AbstractResponse.java/1.1/Sun Oct 16 14:16:31 2005//
/DefaultHeaderImpl.java/1.1/Sun Oct 16 14:16:31 2005//
/DefaultHeaderLine.java/1.1/Sat Oct 15 09:29:36 2005//
/DefaultSelector.java/0/dummy timestamp/-kkv/
/HC_Response.java/1.1/Sun Oct 16 14:16:31 2005//
/HeaderRequest.java/1.1/Sun Oct 16 14:16:31 2005//
/OS_Response.java/1.1/Sun Oct 16 14:16:31 2005//
/SB_Response.java/1.1/Sun Oct 16 14:16:31 2005//
D






















































2005-10-16 10:40              .\DefaultSelector.java              Page 1


package tripleo.http.impl;

import java.io.*;
import java.nio.channels.*;
import java.util.Iterator;

import org.apache.commons.logging.*;

import tripleo.annotation.CtorSet;
import tripleo.nio.javanio.*;
import tripleo.nio.javanio.http.*;

/**
 * Date: Aug 22, 2005
 * Time: 1:51:04 AM
 * <p/>
 * $Id: UrlSinkSelector.java,v 1.1 2005/10/16 14:24:59 olu Exp $
 */
public class DefaultSelector implements Runnable {

	final private Object gate = new Object();
	private @CtorSet Selector sel;
	static private final Log log = LogFactory.getLog(DefaultSelector.class);

	void dispatch() throws IOException {
		sel.select();
		for (Iterator i = sel.selectedKeys().iterator(); i.hasNext();) {
			SelectionKey sk = (SelectionKey) i.next();
			i.remove();
			final Handler h = (Handler) sk.attachment();
			try {
				h.handle(sk);
			} catch (IOException e) {
				System.err.println("SWallowing exception ============================================");
				e.printStackTrace(new PrintWriter(System.err)); // TODO: add to log
				log.warn("Failure during handle ", e);
				System.err.println("==================== ======================================= done");
			}
		}
		synchronized (gate) { }
	}

	public DefaultSelector() throws IOException {
		sel = Selector.open();
	}

	public void run() {
		try {
			do{dispatch();}while(true);
		} catch (IOException e) {
			log.warn("Failure during dispatch ", e);
//				e.printStackTrace(new PrintStream(System.err));
		}
	}

	public void register(final SocketChannel ch,







2005-10-16 10:40              .\DefaultSelector.java              Page 2


	                     final int ops,
	                     final RequestHandler rh) throws ClosedChannelException {
		synchronized (gate) {
			sel.wakeup();
			ch.register(sel, ops, rh);
		}
	}

}






















































2005-10-18 16:56             .\AbstractResponse.java              Page 1


package tripleo.http.impl;

import java.io.OutputStream;
import java.util.*;

import tripleo.http.*;

/**
 * Date: Aug 18, 2005
 * Time: 8:09:10 PM
 * <p/>
 * $Id: AbstractResponse.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 */
abstract public class AbstractResponse implements IResponse {
	private static final Object CRLF = "\r\n";
	final private StringBuilder _cont= new StringBuilder();
	final private Map<String,List<String>> _hdrs=new HashMap();
	protected final OutputStream  _conduit;

	public AbstractResponse(OutputStream a_conduit, IRequest a_req) {
		_conduit = a_conduit;
		_req = a_req;
	}

	protected final IRequest _req;
	private int _code;
	private String _method;
	private String _text;

	public IResponse addHeader(String aName, String aValue) {
		if (!_hdrs.containsKey(aName)){
			return setHeader(aName,aValue);
		} else {
			_hdrs.get(aName).add(aValue);
			return this;
		}
	}

	/**
	 *
	 * @return a duplicate string holding our content
	 */
	public CharSequence getContent() {
		return (_cont.subSequence(0,_cont.length()));
//		return new String(_cont);
	}

	public IResponse append(CharSequence aCs) {
		_cont.append(aCs);
		return this;
	}

	public String firstline() {
		return String.format("%s %d %s",_method,new Integer(_code),_text);
	}








2005-10-18 16:56             .\AbstractResponse.java              Page 2


	public IResponse firstline(String method, int code, String text) {
		_method=method;
		_code=code;
		_text=text;
		return this;
	}

	public List<IHeader> copyOfHeaders() {
		List<IHeader> r=new ArrayList();
		for (Map.Entry<String, List<String>> h : _hdrs.entrySet()) {
			r.add(DefaultHeaderImpl.make(h.getKey(), _singleHeader(h.getValue())));
		}
		return r;
	}

	public IRequest getRequest() {
		return _req;
	}

	/**
	 * @see Reply#headers
	 */
	public void send() throws HttpException {
		StringBuilder xx = new StringBuilder();
		xx.append(firstline())
		  .append(CRLF);

		for (Map.Entry<String, List<String>> h : _hdrs.entrySet()) {
			xx.append(h.getKey())
			  .append(": ");

			final List<String> value = h.getValue();
			_singleHeader(value, xx);
			xx.append(CRLF);
		}

		xx.append(CRLF)
		  .append(_cont);

		_conduit_write(xx);
	}

	abstract void _conduit_write(StringBuilder aStringBuilder) throws HttpException;

	private void _singleHeader(List<String> value, StringBuilder aXx) {
		boolean flag = false;

		for (String v : value) {
			if (flag)
				aXx.append(", "); // TODO should this be a semi-colon?
			aXx.append(v);
			flag = true;
		}
	}

	String _singleHeader(List<String> value) {







2005-10-18 16:56             .\AbstractResponse.java              Page 3


		StringBuilder x= new StringBuilder();
		_singleHeader(value, x);
		return x.toString();
	}

	public IResponse setContent(CharSequence aCs) {
		_cont.delete(0, _cont.length());
		_cont.append(aCs);
		return this;
	}

	public IResponse setHeader(String aName, String aValue) {
		List<String> l=new ArrayList();
		l.add(aValue);
		_hdrs.put(aName, l);
		return this;
	}
}













































2005-10-18 16:20                .\HC_Response.java                Page 1


/*
 * Created on Oct 9, 2005 1:07:28 AM
 * 
 * $Id: HC_Response.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 *
 */
package tripleo.http.impl;

import java.io.IOException;
import java.util.List;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;

import tripleo.http.*;
import tripleo.util.Assert;

public class HC_Response implements IResponse {

	private GetMethod carrier;
	private HttpClient client;
	private int code_;

	public HC_Response(HttpClient aHttpClient, GetMethod aGetmeth) {
		client=aHttpClient;
		carrier=aGetmeth;
	}

	public IRequest getRequest() {
		Assert.not_implemented();
		return null;
	}

	public IResponse setHeader(String aName, String aValue) {
		carrier.addRequestHeader(aName,aValue);
		return this;
	}

	public IResponse addHeader(String aName, String aValue) {
		// TODO??
		carrier.addRequestHeader(aName,carrier.getRequestHeader(aName)+" "+aValue);
		return this;
	}

	public IResponse setContent(CharSequence aCs) {
		Assert.not_reached();
		return this;
	}

	public IResponse append(CharSequence aCs) {
		Assert.not_reached();
		return this;
	}

	public void send() throws HttpException {
		try {







2005-10-18 16:20                .\HC_Response.java                Page 2


			code_ = client.executeMethod(carrier);
		} catch (IOException e) {
			throw HttpException.wrap(e);
		} catch (org.apache.commons.httpclient.HttpException e) {
			throw HttpException.wrap(e);
		}
	}

	public IResponse firstline(String aMethod, int aCode, String aCodeString) {
		Assert.not_reached();
		return this;
	}

	public String firstline() {
		boolean somethingOrOther=true;
		assert somethingOrOther;
		return String.format("%s %d %s", carrier.getName(), code_, carrier.getStatusText());
	}

	public List<IHeader> copyOfHeaders() {
		Assert.not_implemented();
		return null;
	}

	public CharSequence getContent() {
		// TODO: plz chk this. mb make "once" function?
		return carrier.getResponseBodyAsString();
	}

}

































2005-10-21 16:35                .\SB_Response.java                Page 1


package tripleo.http.impl;

import tripleo.http.*;
import tripleo.nio.javanio.StringContent;
import tripleo.nio.javanio.http.*;

/**
 * Date: Aug 18, 2005
 * Time: 7:21:23 PM
 * <p/>
 * $Id: SB_Response.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 */
public class SB_Response extends AbstractResponse {

	public SB_Response(final IRequest a_req) {
		super(null, a_req);
	}

	public void _conduit_write(StringBuilder aXx) throws HttpException {
		_sb=(aXx);
	}

	public StringBuilder sb() { return _sb;}

	private StringBuilder _sb;

	public boolean invariant() {
		return _sb.toString().equals(getContent());
	}

	public Reply createReply() {
		return new Reply(
				new Reply.Code(1000, "GO AWAY"), 
				new StringContent(getContent()), 
				Request.Action.parse("GET")); 
	}
	
}

























2005-10-15 05:29             .\DefaultHeaderLine.java             Page 1


/**
 * 
 */
package tripleo.http.impl;

import rabbit.http.HTTPHeader;
import tripleo.http.IHTTPRequestLine;

public final class DefaultHeaderLine implements IHTTPRequestLine {
	private final HTTPHeader _header;

	public DefaultHeaderLine(HTTPHeader _header) {
		super();
		this._header = _header;
	}

	public String method() {
		return _header.getMethod();
	}

	public String version() {
		return _header.getHTTPVersion();
	}

	public String uri() {
		return _header.getRequestURI();
	}
	
}


































2005-10-21 16:29               .\HeaderRequest.java               Page 1


package tripleo.http.impl;

import java.net.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import rabbit.http.BinaryFunctor;
import rabbit.http.HTTPHeader;
import tripleo.http.*;
import tripleo.http.impl.*;
import tripleo.nio.javanio.http.Request;
import tripleo.nio.javanio.http.Request.Action;

/**
 * Date: Aug 18, 2005
 * Time: 7:21:13 PM
 * <p/>
 * $Id: HeaderRequest.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 */
public class HeaderRequest implements IRequest {
	final private HTTPHeader _header;
	final private CharBuffer _cb;

	public HeaderRequest(HTTPHeader a_header, CharBuffer aCb) {
		_header = a_header;
		_cb     = CharBuffer.wrap(aCb);
	}

	public String getUri() {
		return _header.getRequestURI();
	}

	public List getHeaders() {
		return _header.copyOfHeaders();
	}

	public ByteBuffer getContent() {
//		final int rem = _cb.remaining();
//		final ByteBuffer r = ByteBuffer.allocate(rem);
		return Charset.defaultCharset().encode(_cb);
//		_cb.read(r);
//		return r;
	}

	public String version() {
		return _header.getHTTPVersion();
	}

	public String requestLine() {
		return _header.getRequestLine();
	}

	public List<IHeader> copyOfHeaders() {







2005-10-21 16:29               .\HeaderRequest.java               Page 2


		final List<IHeader> r=new ArrayList<IHeader>();
		_header.iterateHeaders(new BinaryFunctor<String,String>() {
			public boolean call(String s, String s2) {
				r.add(DefaultHeaderImpl.make(s,s2));
				return false;
			}
		});
		return r;
	}

	public IHTTPRequestLine getRequestLine() {
		return new DefaultHeaderLine(_header);
	}

	public Request createRequest() {
		
		IHTTPRequestLine requestLine = getRequestLine();
		try {
			return new Request(
					Request.Action.parse(requestLine.method()),
					requestLine.version(),
					new java.net.URI(requestLine.uri()));
		} catch (URISyntaxException e) {
			// TODO shouldnt be here
			e.printStackTrace();
			return null;
		}
				

	}
}
































2005-10-18 16:18                .\OS_Response.java                Page 1


/*
 * Created on Aug 18, 2005 5:22:41 PM
 * 
 * $Id: OS_Response.java,v 1.1 2005/10/16 14:16:31 olu Exp $
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package tripleo.http.impl;

import java.io.*;

import tripleo.http.*;


public class OS_Response extends AbstractResponse {

	private OS_Response() {	super(null, null); }
	
	public OS_Response(final OutputStream a_conduit, final IRequest a_req) {
		super(a_conduit, a_req);
	}

	public void _conduit_write(StringBuilder aXx) throws HttpException {
		byte[] bytes = aXx.toString().getBytes(); // ascii-7

		try {
			_conduit.write(bytes);
		} catch (IOException e) {
			throw HttpException.wrap(e);
		}
	}

}



























